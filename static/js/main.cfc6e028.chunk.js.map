{"version":3,"sources":["config/routes.js","config/grants.js","config/getDefaultRoutes.js","config/config.js","App.js","serviceWorkerRegistration.js","index.js","config/locales/index.js","config/themes.js"],"names":["About","lazy","Admin","Companies","Company","Tasks","Task","FirebaseCols","FirebaseDocs","FirebaseLists","FirebaseMessaging","FirebasePaths","FirebaseStorage","Dashboard","Posts","Post","GettingStarted","routes","path","exact","component","grants","SignIn","MyAccount","Users","User","Roles","Role","Chats","CreateChat","GroupChat","EditMembers","EditAdmins","getDefaultRoutes","appConfig","redirectTo","auth","pages","PageNotFound","config","firebase","prod","initConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","messaging","publicVapidKey","dev","devd","firebaseuiProps","signInOptions","googleMaps","persistKey","signInURL","onAuthStateChanged","user","firebaseApp","a","database","ref","uid","once","grantsSnap","notifcationsDisabledSnap","isAdminSnap","on","snap","updateAuth","val","notificationsDisabled","isAdmin","defaultUserData","isGranted","update","displayName","photoURL","providers","providerData","emailVerified","isAnonymous","lastMessage","off","setAuth","console","warn","locale","locales","defaultLocale","parseLanguages","onError","e","menu","MenuContent","MenuHeader","theme","themes","defaultThemeID","defaultType","LandingPage","components","Menu","Loading","containers","AppContainer","LayoutContainer","Demo","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","reg","callback","awaitStateChange","installing","addEventListener","this","state","waiting","listenForWaitingServiceWorker","onUpdate","onupdatefound","installingWorker","onstatechange","controller","log","onSuccess","catch","error","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","postMessage","type","messages","id","source","palette","primary","main","secondary","color","red","pink","green"],"mappings":"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","file":"static/js/main.cfc6e028.chunk.js","sourcesContent":["/* eslint-disable react/jsx-key */\r\nimport AuthorizedRoute from 'base-shell/lib/components/AuthorizedRoute/AuthorizedRoute'\r\nimport React, { lazy } from 'react'\r\nimport { Route } from 'react-router-dom'\r\n\r\nconst About = lazy(() => import('../pages/About'))\r\nconst Admin = lazy(() => import('../pages/Demo/Admin'))\r\nconst Companies = lazy(() => import('../pages/Demo/Companies'))\r\nconst Company = lazy(() => import('../pages/Demo/Companies/Company'))\r\nconst Tasks = lazy(() => import('../pages/Demo/Tasks'))\r\nconst Task = lazy(() => import('../pages/Demo/Tasks/Task'))\r\nconst FirebaseCols = lazy(() => import('../pages/Firebase/Cols'))\r\nconst FirebaseDocs = lazy(() => import('../pages/Firebase/Docs'))\r\nconst FirebaseLists = lazy(() => import('../pages/Firebase/Lists'))\r\nconst FirebaseMessaging = lazy(() => import('../pages/Firebase/Messaging'))\r\nconst FirebasePaths = lazy(() => import('../pages/Firebase/Paths'))\r\nconst FirebaseStorage = lazy(() => import('../pages/Firebase/Storage'))\r\nconst Dashboard = lazy(() => import('../pages/Dashboard'))\r\nconst Posts = lazy(() => import('../pages/Demo/Posts/Posts'))\r\nconst Post = lazy(() => import('../pages/Demo/Posts/Post'))\r\nconst GettingStarted = lazy(() =>\r\n  import('../pages/Documentation/GettingStarted')\r\n)\r\n\r\nconst routes = [\r\n  <Route path=\"/about\" exact component={About} />,\r\n  <Route path=\"/docu/getting_started\" exact component={GettingStarted} />,\r\n  <AuthorizedRoute path=\"/dashboard\" exact component={Dashboard} />,\r\n  <AuthorizedRoute path=\"/firebase_paths\" exact component={FirebasePaths} />,\r\n  <AuthorizedRoute path=\"/firebase_lists\" exact component={FirebaseLists} />,\r\n  <AuthorizedRoute path=\"/firebase_docs\" exact component={FirebaseDocs} />,\r\n  <AuthorizedRoute path=\"/firebase_cols\" exact component={FirebaseCols} />,\r\n  <AuthorizedRoute path=\"/admin\" exact component={Admin} />,\r\n  <AuthorizedRoute path=\"/companies\" exact component={Companies} />,\r\n  <AuthorizedRoute path=\"/companies/:uid\" exact component={Company} />,\r\n  <AuthorizedRoute path=\"/create_company\" exact component={Company} />,\r\n  <AuthorizedRoute path=\"/tasks\" exact component={Tasks} />,\r\n  <AuthorizedRoute path=\"/tasks/:uid\" exact component={Task} />,\r\n  <AuthorizedRoute path=\"/create_task\" exact component={Task} />,\r\n  <AuthorizedRoute path=\"/posts\" exact component={Posts} />,\r\n  <AuthorizedRoute path=\"/create_post\" exact component={Post} />,\r\n  <AuthorizedRoute\r\n    path=\"/firebase_messaging\"\r\n    exact\r\n    component={FirebaseMessaging}\r\n  />,\r\n  <AuthorizedRoute\r\n    path=\"/firebase_storage\"\r\n    exact\r\n    component={FirebaseStorage}\r\n  />,\r\n]\r\n\r\nexport default routes\r\n","export const grants = ['create_company', 'edit_company', 'delete_company', 'read_companies']\r\n\r\nexport default grants\r\n","import AuthorizedRoute from 'base-shell/lib/components/AuthorizedRoute/AuthorizedRoute'\r\nimport React, { lazy } from 'react'\r\nimport UnauthorizedRoute from 'base-shell/lib/components/UnauthorizedRoute/UnauthorizedRoute'\r\nimport { Route } from 'react-router-dom'\r\n\r\nconst SignIn = lazy(() => import('rmw-shell/lib/pages/SignIn/SignIn'))\r\nconst MyAccount = lazy(() => import('rmw-shell/lib/pages/MyAccount/MyAccount'))\r\nconst Users = lazy(() => import('rmw-shell/lib/pages/Users'))\r\nconst User = lazy(() => import('rmw-shell/lib/pages/Users/User'))\r\nconst Roles = lazy(() => import('rmw-shell/lib/pages/Roles'))\r\nconst Role = lazy(() => import('rmw-shell/lib/pages/Roles/Role'))\r\nconst Chats = lazy(() => import('rmw-shell/lib/pages/Chats'))\r\nconst CreateChat = lazy(() => import('rmw-shell/lib/pages/CreateChat'))\r\nconst GroupChat = lazy(() => import('rmw-shell/lib/pages/GroupChat'))\r\nconst EditMembers = lazy(() => import('rmw-shell/lib/pages/EditMembers'))\r\nconst EditAdmins = lazy(() => import('rmw-shell/lib/pages/EditAdmins'))\r\n\r\nconst getDefaultRoutes = (appConfig) => {\r\n  return [\r\n    <UnauthorizedRoute\r\n      path=\"/signin\"\r\n      redirectTo={appConfig?.auth?.redirectTo || '/'}\r\n      exact\r\n      component={SignIn}\r\n    />,\r\n    <AuthorizedRoute path=\"/chats\" exact component={Chats} />,\r\n    <AuthorizedRoute path=\"/chats/:uid\" exact component={Chats} />,\r\n    <AuthorizedRoute path=\"/create_chat\" exact component={CreateChat} />,\r\n    <AuthorizedRoute path=\"/edit_members/:uid\" exact component={EditMembers} />,\r\n    <AuthorizedRoute path=\"/edit_admins/:uid\" exact component={EditAdmins} />,\r\n    <AuthorizedRoute path=\"/group_chat\" exact component={GroupChat} />,\r\n    <AuthorizedRoute path=\"/group_chat/:uid\" exact component={GroupChat} />,\r\n    <AuthorizedRoute path=\"/roles\" exact component={Roles} />,\r\n    <AuthorizedRoute path=\"/create_role\" exact component={Role} />,\r\n    <AuthorizedRoute path=\"/roles/:uid\" exact component={Role} />,\r\n    <AuthorizedRoute path=\"/roles/:uid/:tab\" exact component={Role} />,\r\n    <AuthorizedRoute path=\"/my_account\" exact component={MyAccount} />,\r\n    <AuthorizedRoute path=\"/users\" exact component={Users} />,\r\n    <AuthorizedRoute path=\"/users/:uid\" exact component={User} />,\r\n    <AuthorizedRoute path=\"/users/:uid/:tab\" exact component={User} />,\r\n\r\n    <Route component={appConfig?.pages?.PageNotFound} />,\r\n  ]\r\n}\r\n\r\nexport default getDefaultRoutes\r\n","import { lazy } from 'react'\r\nimport locales from './locales'\r\nimport routes from './routes'\r\nimport themes from './themes'\r\nimport parseLanguages from 'base-shell/lib/utils/locale'\r\nimport grants from './grants'\r\nimport Loading from 'material-ui-shell/lib/components/Loading/Loading'\r\nimport getDefaultRoutes from './getDefaultRoutes'\r\nimport { defaultUserData, isGranted } from 'rmw-shell/lib/utils/auth'\r\n\r\nconst config = {\r\n  firebase: {\r\n    prod: {\r\n      initConfig: {\r\n        apiKey: 'AIzaSyBQAmNJ2DbRyw8PqdmNWlePYtMP0hUcjpY',\r\n        authDomain: 'react-most-wanted-3b1b2.firebaseapp.com',\r\n        databaseURL: 'https://react-most-wanted-3b1b2.firebaseio.com',\r\n        projectId: 'react-most-wanted-3b1b2',\r\n        storageBucket: 'react-most-wanted-3b1b2.appspot.com',\r\n        messagingSenderId: '258373383650',\r\n        appId: '1:258373383650:web:b49ad5dd28da999a',\r\n      },\r\n      messaging: {\r\n        publicVapidKey:\r\n          'BEthk1-Qmoh9opZbi1AUZpxANTu6djVRDph4MLpyO2Qk6Dglm1Sa8Yt_pYi4EhYi3Tj-xgLqUktlbNuP_RP6gto',\r\n      },\r\n    },\r\n    dev: {\r\n      initConfig: {\r\n        apiKey: 'AIzaSyBQAmNJ2DbRyw8PqdmNWlePYtMP0hUcjpY',\r\n        authDomain: 'react-most-wanted-3b1b2.firebaseapp.com',\r\n        databaseURL: 'https://react-most-wanted-3b1b2.firebaseio.com',\r\n        projectId: 'react-most-wanted-3b1b2',\r\n        storageBucket: 'react-most-wanted-3b1b2.appspot.com',\r\n        messagingSenderId: '258373383650',\r\n        appId: '1:258373383650:web:b49ad5dd28da999a',\r\n      },\r\n      messaging: {\r\n        publicVapidKey:\r\n          'BEthk1-Qmoh9opZbi1AUZpxANTu6djVRDph4MLpyO2Qk6Dglm1Sa8Yt_pYi4EhYi3Tj-xgLqUktlbNuP_RP6gto',\r\n      },\r\n    },\r\n    devd: {\r\n      initConfig: {\r\n        apiKey: 'AIzaSyB31cMH9nJnERC1WCWA7lQHnY08voLs-Z0',\r\n        authDomain: 'react-most-wanted-dev.firebaseapp.com',\r\n        databaseURL: 'https://react-most-wanted-dev.firebaseio.com',\r\n        projectId: 'react-most-wanted-dev',\r\n        storageBucket: 'react-most-wanted-dev.appspot.com',\r\n        messagingSenderId: '70650394824',\r\n        appId: '1:70650394824:web:7cd3113c37741efc',\r\n      },\r\n      messaging: {\r\n        publicVapidKey:\r\n          'BGddXH_O6qLmcingsSJx-R3hC8U9yUr2mW4ko63fF__e50WvfRcBfZu_JyBzLI35DNUE5x_9CPBqe64BWniCxV0',\r\n      },\r\n    },\r\n    firebaseuiProps: {\r\n      signInOptions: [\r\n        'google.com',\r\n        'facebook.com',\r\n        'twitter.com',\r\n        'github.com',\r\n        'password',\r\n        'phone',\r\n      ],\r\n    },\r\n  },\r\n  googleMaps: {\r\n    apiKey: 'AIzaSyByMSTTLt1Mf_4K1J9necAbw2NPDu2WD7g',\r\n  },\r\n  auth: {\r\n    grants,\r\n    redirectTo: '/dashboard',\r\n    persistKey: 'base-shell:auth',\r\n    signInURL: '/signin',\r\n    onAuthStateChanged: async (user, auth, firebaseApp) => {\r\n      try {\r\n        if (user != null) {\r\n          const grantsSnap = await firebaseApp\r\n            .database()\r\n            .ref(`user_grants/${user.uid}`)\r\n            .once('value')\r\n          const notifcationsDisabledSnap = await firebaseApp\r\n            .database()\r\n            .ref(`disable_notifications/${user.uid}`)\r\n            .once('value')\r\n\r\n          const isAdminSnap = await firebaseApp\r\n            .database()\r\n            .ref(`admins/${user.uid}`)\r\n            .once('value')\r\n\r\n          firebaseApp\r\n            .database()\r\n            .ref(`user_grants/${user.uid}`)\r\n            .on('value', (snap) => {\r\n              auth.updateAuth({ grants: snap.val() })\r\n            })\r\n\r\n          firebaseApp\r\n            .database()\r\n            .ref(`disable_notifications/${user.uid}`)\r\n            .on('value', (snap) => {\r\n              auth.updateAuth({ notificationsDisabled: !!snap.val() })\r\n            })\r\n\r\n          firebaseApp\r\n            .database()\r\n            .ref(`admins/${user.uid}`)\r\n            .on('value', (snap) => {\r\n              auth.updateAuth({ isAdmin: !!snap.val() })\r\n            })\r\n\r\n          auth.updateAuth({\r\n            ...defaultUserData(user),\r\n            grants: grantsSnap.val(),\r\n            notificationsDisabled: notifcationsDisabledSnap.val(),\r\n            isAdmin: !!isAdminSnap.val(),\r\n            isGranted,\r\n          })\r\n\r\n          firebaseApp.database().ref(`users/${user.uid}`).update({\r\n            displayName: user.displayName,\r\n            uid: user.uid,\r\n            photoURL: user.photoURL,\r\n            providers: user.providerData,\r\n            emailVerified: user.emailVerified,\r\n            isAnonymous: user.isAnonymous,\r\n            notificationsDisabled: notifcationsDisabledSnap.val(),\r\n          })\r\n\r\n          await firebaseApp\r\n            .database()\r\n            .ref(`user_chats/${user.uid}/public_chat`)\r\n            .update({\r\n              displayName: 'Public Chat',\r\n              lastMessage: 'Group chat',\r\n              path: `group_chat_messages/public_chat`,\r\n            })\r\n        } else {\r\n          firebaseApp.database().ref().off()\r\n          auth.setAuth(defaultUserData(user))\r\n        }\r\n      } catch (error) {\r\n        console.warn(error)\r\n      }\r\n    },\r\n  },\r\n  getDefaultRoutes,\r\n  routes,\r\n  locale: {\r\n    locales,\r\n    persistKey: 'base-shell:locale',\r\n    defaultLocale: parseLanguages(['en', 'de', 'ru'], 'en'),\r\n    onError: (e) => {\r\n      //console.warn(e)\r\n\r\n      return\r\n    },\r\n  },\r\n  menu: {\r\n    MenuContent: lazy(() => import('../components/Menu/MenuContent')),\r\n    MenuHeader: lazy(() =>\r\n      import('material-ui-shell/lib/components/MenuHeader/MenuHeader')\r\n    ),\r\n  },\r\n  theme: {\r\n    themes,\r\n    defaultThemeID: 'default',\r\n    defaultType: 'light',\r\n  },\r\n  pages: {\r\n    LandingPage: lazy(() => import('../pages/LandingPage')),\r\n    PageNotFound: lazy(() => import('../pages/PageNotFound')),\r\n  },\r\n  components: {\r\n    Menu: lazy(() =>\r\n      import('rmw-shell/lib/containers/FirebaseMenu/FirebaseMenu')\r\n    ),\r\n    Loading,\r\n  },\r\n\r\n  containers: {\r\n    AppContainer: lazy(() =>\r\n      import('material-ui-shell/lib/containers/AppContainer/AppContainer')\r\n    ),\r\n    LayoutContainer: lazy(() =>\r\n      import('rmw-shell/lib/containers/LayoutContainer/LayoutContainer')\r\n    ),\r\n  },\r\n}\r\n\r\nexport default config\r\n","import React, { Component } from 'react'\r\nimport App from 'base-shell/lib'\r\nimport config from './config'\r\n\r\nexport default class Demo extends Component {\r\n  render() {\r\n    return <App config={config} />\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nconst listenForWaitingServiceWorker = (reg, callback = () => {}) => {\n  function awaitStateChange() {\n    reg.installing.addEventListener('statechange', function () {\n      if (this.state === 'installed') callback(reg)\n    })\n  }\n  if (!reg) return\n  if (reg.waiting) return callback(reg)\n  if (reg.installing) awaitStateChange()\n  reg.addEventListener('updatefound', awaitStateChange)\n}\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      listenForWaitingServiceWorker(registration, config && config.onUpdate)\n\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                //config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\r\nimport { render } from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\r\n\r\nrender(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register({\r\n  onUpdate: (reg) => {\r\n    window.update = () => {\r\n      try {\r\n        reg.waiting.postMessage({ type: 'SKIP_WAITING' })\r\n        window.location.reload()\r\n      } catch (error) {\r\n        console.warn('error', error)\r\n      }\r\n    }\r\n  },\r\n})\r\n","const locales = [\r\n  {\r\n    locale: 'en',\r\n    messages: import('./en'),\r\n    //loadData: import(`@formatjs/intl-relativetimeformat/dist/locale-data/en`),\r\n  },\r\n  {\r\n    locale: 'ru',\r\n    messages: import('./ru'),\r\n    //loadData: import(`@formatjs/intl-relativetimeformat/dist/locale-data/ru`),\r\n  },\r\n  {\r\n    locale: 'de',\r\n    messages: import('./de'),\r\n    //loadData: import(`@formatjs/intl-relativetimeformat/dist/locale-data/de`),\r\n  },\r\n]\r\n\r\nexport default locales\r\n","import red from '@material-ui/core/colors/red'\r\nimport pink from '@material-ui/core/colors/pink'\r\nimport green from '@material-ui/core/colors/green'\r\n\r\nconst themes = [\r\n  {\r\n    id: 'default',\r\n    source: {\r\n      palette: {\r\n        primary: { main: '#343434' },\r\n        secondary: {\r\n          main: '#c62828',\r\n        },\r\n      },\r\n    },\r\n  },\r\n  {\r\n    id: 'red',\r\n    color: red[500],\r\n    source: {\r\n      palette: {\r\n        primary: red,\r\n        secondary: pink,\r\n        error: red,\r\n      },\r\n    },\r\n  },\r\n  {\r\n    id: 'green',\r\n    color: green[500],\r\n    source: {\r\n      palette: {\r\n        primary: green,\r\n        secondary: red,\r\n        error: red,\r\n      },\r\n    },\r\n  },\r\n  {\r\n    id: 'standard',\r\n  },\r\n]\r\n\r\nexport default themes\r\n"],"sourceRoot":""}